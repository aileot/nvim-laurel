*laurel.txt*         For Neovim >= 0.8.0         Last change: 2023 February 18

==============================================================================
Table of Contents                                   *laurel-table-of-contents*

1. nvim-laurel                                            |laurel-nvim-laurel|
  - CAUTION                                                   |laurel-caution|
  - Terminology                                           |laurel-terminology|
  - Macros                                                     |laurel-macros|
  - Anti-Patterns                                       |laurel-anti-patterns|
  - Deprecated Features                           |laurel-deprecated-features|

==============================================================================
1. nvim-laurel                                            *laurel-nvim-laurel*

nvim-laurel provides a set of macros for Neovim config, inspired by the builtin
Nvim Lua standard library and by good old Vim script.

CAUTION                                                       *laurel-caution*

Each macro might be more flexible than documented, but of course, undocumented
usages are subject to change without notifications.

TERMINOLOGY                                               *laurel-terminology*

LHS ~

An abbreviation of left-hand-side.

RHS ~

An abbreviation of right-hand-side.

({EXPR}) ~

Hash function, where `$1` through `$9` and `$...` are available as the
argument. `$` is an alias for `$1`. See the reference
<https://fennel-lang.org/reference#hash-function-literal-shorthand> for the
detail.

SEQUENCE ~

An alias of sequential table `[]`.

KV-TABLE ~

An alias of key/value table `{}`.

BARE-{TYPE} ~

It describes the `{type}` value must be neither symbol nor list in compile
time. For example,


- `:foobar` is a `bare-string`.
- `(.. :foo :bar)` is not a `bare-string`.
- `[:foo :bar]` is a `bare-sequence` and also a `bare-string[]`.
- `[baz]` where `baz` is either symbol or list is a `bare-sequence`, but not a
    `bare-string[]`.
- `(icollect [_ val (ipairs [:foo :bar])] val)` is neither a `bare-sequence`
    nor `bare-string[]`.


?{NAME} ~

`{name}` is omittable.

API-OPTS ~

It is kv-table `{}` option for the api functions, `vim.api.nvim_foo()`. Unless
otherwise noted, this option has the following features:


- It only accepts the same key/value described in `api.txt`.
- Its values have the highest priority over those set in the other arguments
    if conflicted.


EXTRA-OPTS ~

An alternative form for `api-opts`. Unless otherwise noted, this option has the
following features:


- It is bare-sequence `[]`, but is interpreted as if kv-table `{}` in the
    following manner:
    - Items for keys **must** be bare-strings; items for values can be of any
        type.
    - Boolean key/value for `api-opts` is set to `true` by key itself; the other
        keys expects the next items as their values respectively.
    - To set `false` to boolean key/value, set it in `api-opts` instead.
- It is intended as shorthand; for complicated usage, use `api-opts` instead
    or use them together.
- It could accept some additional keys which are unavailable in `api-opts`.


MACROS                                                         *laurel-macros*


- |laurel-autocmd|
- |laurel-keymap|
- |laurel-variable|
- |laurel-option|
- |laurel-others|


AUTOCMD ~


- |laurel-augroup!|
- |laurel-autocmd!|
- |laurel-au!|


                                                             *laurel-augroup!*

augroup!                               Create or get an augroup, or override an
                                       existing augroup.


>fennel
    (augroup! name ?api-opts-for-augroup) ; Only this format returns the augroup id.
    (augroup! name ?api-opts-for-augroup
      [events ?pattern ?extra-opts callback ?api-opts]
      ...)
    (augroup! name ?api-opts-for-augroup
      ;; Wrap args in `autocmd!` or `au!` instead of brackets.
      (autocmd! events ?pattern ?extra-opts callback ?api-opts)
      ...)
<



- `?api-opts-for-augroup`: (kv-table) `:h nvim_create_augroup()`. You cannot use
    macro/function named `au!` or `autocmd!` here.
- `name`: (string) The name of autocmd group.
- `events`: (string|string[]) The event or events to register this autocmd.
- `?pattern`: (bare-sequence) Patterns to match against. To set `pattern` in
    symbol or list, set it in either `extra-opts` or `api-opts` instead. The first
    pattern in string cannot be any of the keys used in `?extra-opts`.
- |laurel-`?extra-opts`|: (bare-sequence) Additional option:
    - `<buffer>`: Create autocmd to current buffer by itself.
- `callback`: (string|function) Set either callback function or Ex command. A
    callback is interpreted as Lua function by default. To set Ex command, you have
    three options:
    - Set it in bare-string.
    - Insert `&vim` symbol just before the callback.
    - Name the first symbol for the callback to match `^<.+>` in Lua pattern.
    Note: Set `vim.fn.foobar` to call Vim script function `foobar` without table
    argument from `nvim_create_autocmd()`; on the other hand, set `(vim.fn.foobar
    $)` to call `foobar` with the table argument.
- |laurel-`?api-opts`|: (kv-table) `:h nvim_create_autocmd()`.


>fennel
    (augroup! :sample-augroup
      [:TextYankPost (vim.highlight.on_yank {:timeout 450 :on_visual false})]
      (autocmd! [:InsertEnter :InsertLeave]
          [:<buffer> :desc "call foobar() without any args"] vim.fn.foobar)
      (autocmd! :VimEnter [:once :nested :desc "call bazqux() with <amatch>"]
          (vim.fn.bazqux $.match)))
      (autocmd! :LspAttach
          (au! $.group :CursorHold [:buffer $.buf] vim.lsp.buf.document_highlight))
<


is equivalent to

>vim
    augroup sample-augroup
      autocmd!
      autocmd TextYankPost  lua vim.highlight.on_yank {timeout=450, on_visual=false}
      autocmd InsertEnter,InsertLeave <buffer> call foobar()
      autocmd VimEnter  ++once ++nested call bazqux(expand('<amatch>'))
      autocmd LspAttach  au sample-augroup CursorHold <buffer>
      \ lua vim.lsp.buf.document_highlight()
    augroup END
<


>lua
    local id = vim.api.nvim_create_augroup("sample-augroup", {})
    vim.api.nvim_create_autocmd("TextYankPost", {
      group = id,
      callback = function()
       vim.highlight.on_yank {timeout=450, on_visual=false}
      end,
    })
    vim.api.nvim_create_autocmd({"InsertEnter", "InsertLeave"}, {
      group = id,
      buffer = 0,
      desc = "call foobar() without any args",
      callback = "foobar",
    })
    vim.api.nvim_create_autocmd("VimEnter", {
      group = id,
      once = true,
      nested = true,
      desc = "call bazqux() with <amatch>",
      callback = function(args)
        vim.fn["bazqux"](args.match)
      end,
    })
    vim.api.nvim_create_autocmd("LspAttach", {
      group = id,
      callback = function(args)
        vim.api.nvim_create_autocmd("CursorHold", {
          group = args.group,
          buffer = args.buf,
          callback = vim.lsp.buf.document_highlight,
        })
      end,
    })
<


c.f. |laurel-`autocmd!`|

                                                             *laurel-autocmd!*

autocmd!                               Create an autocmd.


>fennel
    (autocmd! events api-opts) ; Just as an alias of `nvim_create_autocmd()`.
    (autocmd! name-or-id events ?pattern ?extra-opts callback ?api-opts)
<



- `name-or-id`: (string|integer|nil) The autocmd group name or id to match
    against. It is necessary unlike `nvim_create_autocmd()` unless this
    `autocmd!` macro is within either `augroup!`. Set it to `nil` to define
    `autocmd`s affiliated with no augroup.


See |laurel-`augroup!`| for the rest.

                                                                  *laurel-au!*

au!                                    An alias of |laurel-`autocmd!`|.


KEYMAP ~


- |laurel-map!|: A replacement of `vim.keymap.set`
- |laurel-unmap!|: A replacement of `vim.keymap.del`
- |laurel-<cmd>|
- |laurel-<c-u>|


                                                                 *laurel-map!*

map!                                   Map `lhs` to `rhs` in `modes`,
                                       non-recursively by default.


>fennel
    (map! modes ?extra-opts lhs rhs ?api-opts)
    (map! modes lhs ?extra-opts rhs ?api-opts)
<



- `modes`: (string|string[]) Mode short-name (map command prefix: "n", "i", "v",
    "x", â€¦) or "!" for `:map!`, or empty string for `:map`. As long as in
    bare-string, multi modes can be set in a string like `:nox` instead of `[:n :o
    :x]`.
- |laurel-`?extra-opts`|: (bare-sequence) Additional option:
    - `remap`: Make the mapping recursive. This is the inverse of the "noremap"
        option from `nvim_set_keymap()`.
    - `literal`: Disable `replace_keycodes`, which is automatically enabled when
        `expr` is set in `extra-opts`.
    - `<buffer>`: Map `lhs` in current buffer by itself.
    - `buffer`: Map `lhs` to a buffer of the next value.
- `lhs`: (string) Left-hand-side of the mapping.
- `rhs`: (string|function) Right-hand-side of the mapping. Set either callback
    function or Key sequence. A callback is interpreted as Lua function by default.
    To set Ex command, you have three options:
    - Set it in bare-string.
    - Insert `&vim` symbol just before the callback.
    - Name the first symbol for the callback to match `^<.+>` in Lua pattern.
- |laurel-`?api-opts`|: (kv-table) `:h nvim_set_keymap()`.


>fennel
    (map! :i :jk :<Esc>)
    (map! :n :lhs [:desc "call foobar()"] (vim.fn.foobar))
    (map! [:n :x] [:remap :expr :literal] :d "&readonly ? '<Plug>(readonly-d)' : '<Plug>(noreadonly-d)'")
    (map! [:n :x] [:remap :expr] :u (if vim.bo.readonly
                                         "<Plug>(readonly-u)"
                                         "<Plug>(noreadonly-u)"))
<


is equivalent to

>vim
    inoremap jk <Esc>
    nnoremap lhs <Cmd>call foobar()<CR>
    nmap <expr> d &readonly ? "\<Plug>(readonly-d)" : "\<Plug>(noreadonly-d)"
    xmap <expr> u &readonly ? "\<Plug>(readonly-u)" : "\<Plug>(noreadonly-u)"
<


>lua
    vim.api.nvim_set_keymap("i", "jk", "<Esc>", {})
    vim.api.nvim_set_keymap("n", "lhs", "", {
      -- callback = vim.fn["foobar"], -- If you don't care autoload.
      callback = function()
        vim.fn["foobar"]()
    end})
    vim.api.nvim_set_keymap("n", "d", "&readonly ? '<Plug>(readonly-d)' : '<Plug>(noreadonly-d)'", {
      expr = true,
      replace_keycodes = false,
    })
    vim.api.nvim_set_keymap("x", "d", "&readonly ? '<Plug>(readonly-d)' : '<Plug>(noreadonly-d)'", {
      expr = true,
      replace_keycodes = false,
    })
    vim.api.nvim_set_keymap("n", "u", "", {
      expr = true,
      callback = function()
        return vim.bo.readonly and "<Plug>(readonly-u)" or "<Plug>(noreadonly-u)"
      end,
    })
    vim.api.nvim_set_keymap("x", "u", "", {
      expr = true,
      callback = function()
        return vim.bo.readonly and "<Plug>(readonly-u)" or "<Plug>(noreadonly-u)"
      end,
    })
    -- or with vim.keymap.set wrapper,
    vim.keymap.set("i", "jk", "<Esc>")
    vim.keymap.set("n", "lhs", function()
      vim.fn["foobar"]()
    end)
    vim.keymap.set({ "n", "x" }, "d", "&readonly ? '<Plug>(readonly-d)' : '<Plug>(noreadonly-d)'", {
      remap = true,
      expr = true,
      replace_keycodes = false,
    })
    vim.keymap.set({ "n", "x" }, "u", function()
      return vim.bo.readonly and "<Plug>(readonly-u)" or "<Plug>(noreadonly-u)"
    end, {
      remap = true,
      expr = true,
    })
<


                                                               *laurel-unmap!*

unmap!                                 Delete keymap.


>fennel
    (unmap! ?bufnr mode lhs)
<



- `?bufnr`: (number) Optional buffer handle, or 0 for current buffer.
- `mode`: (string) Mode to unmap.
- `lhs`: (string) Left-hand-side key to unmap.


>fennel
    (unmap! :n :foo)
    (unmap! 0 :o :bar)
    (unmap! 10 :x :baz)
<


is equivalent to

>vim
    nunmap foo
    ounmap <buffer> bar
    " No simple command to delete keymap in specific buffer.
<


>lua
    vim.api.nvim_del_keymap("n", "foo")
    vim.api.nvim_buf_del_keymap(0, "o", "bar")
    vim.api.nvim_buf_del_keymap(10, "x", "baz")
<


                                                                *laurel-<Cmd>*

<Cmd>                                  Generate `<Cmd>foobar<CR>` in string.
                                       Useful for `rhs` in keymap macro.


>fennel
    (<Cmd> text)
<



- `text`: (string)


                                                                *laurel-<C-u>*

<C-u>                                  Generate `:<C-u>foobar<CR>` in string.
                                       Useful for `rhs` in keymap macro.


>fennel
    (<C-u> text)
<



- `text`: (string)


VARIABLE ~


- |laurel-g!|
- |laurel-b!|
- |laurel-w!|
- |laurel-t!|
- |laurel-v!|
- |laurel-env!|


                                                                   *laurel-g!*

g!                                     Set global (`g:`) editor variable.


>fennel
    (g! name val)
<



- `name`: (string) Variable name.
- `val`: (any) Variable value.


                                                                   *laurel-b!*

b!                                     Set buffer-scoped (`b:`) variable for
                                       the current buffer. Can be indexed with
                                       an integer to access variables for
                                       specific buffer.


>fennel
    (b! ?id name val)
<



- `?id`: (integer) Buffer handle, or 0 for current buffer.
- `name`: (string) Variable name.
- `val`: (any) Variable value.


>fennel
    (b! :foo :bar)
    (b! 8 :baz :qux)
<


is equivalent to

>lua
    vim.api.nvim_buf_set_var(0, "foo", "bar")
    vim.api.nvim_buf_set_var(8, "foo", "bar")
    -- Or with `vim.b`,
    vim.b.foo = "bar"
    vim.b[8].baz = "qux"
<


>vim
    let b:foo = 'bar'
    call setbufvar(8, 'baz', 'qux')
<


                                                                   *laurel-w!*

w!                                     Set window-scoped (`w:`) variable for
                                       the current window. Can be indexed with
                                       an integer to access variables for
                                       specific window.


>fennel
    (w! ?id name val)
<



- `?id`: (integer) Window handle, or 0 for current window.
- `name`: (string) Variable name.
- `val`: (any) Variable value.


                                                                   *laurel-t!*

t!                                     Set tabpage-scoped (`t:`) variable for
                                       the current tabpage. Can be indexed with
                                       an integer to access variables for
                                       specific tabpage.


>fennel
    (t! ?id name val)
<



- `?id`: (integer) Tabpage handle, or 0 for current tabpage.
- `name`: (string) Variable name.
- `val`: (any) Variable value.


                                                                   *laurel-v!*

v!                                     Set `v:` variable if not readonly.


>fennel
    (v! name val)
<



- `name`: (string) Variable name.
- `val`: (any) Variable value.


                                                                 *laurel-env!*

env!                                   Set environment variable in the editor
                                       session.


>fennel
    (env! name val)
<



- `name`: (string) Variable name. A bare-string can starts with `$` (ignored
    internally), which helps `gf` jump to the path.
- `val`: (any) Variable value.


>fennel
    (env! :$NVIM_CACHE_HOME (vim.fn.stdpath :cache))
    (env! :$NVIM_CONFIG_HOME (vim.fn.stdpath :config))
    (env! :$NVIM_DATA_HOME (vim.fn.stdpath :data))
    (env! :$NVIM_STATE_HOME (vim.fn.stdpath :state))
    (env! :$PLUGIN_CACHE_HOME (vim.fs.normalize :$NVIM_CACHE_HOME/to/plugin/home))
<


is equivalent to

>lua
    vim.env.NVIM_CACHE_HOME = vim.fn.stdpath "cache"
    vim.env.NVIM_CONFIG_HOME = vim.fn.stdpath "config"
    vim.env.NVIM_DATA_HOME = vim.fn.stdpath "data"
    vim.env.NVIM_STATE_HOME = vim.fn.stdpath "state"
    vim.env.PLUGIN_CACHE_HOME vim.fs.normalize "$NVIM_CACHE_HOME/to/plugin/home"
<


>vim
    let $NVIM_CACHE_HOME = stdpath('cache')
    let $NVIM_CONFIG_HOME = stdpath('config')
    let $NVIM_DATA_HOME = stdpath('data')
    let $NVIM_STATE_HOME = stdpath('state')
    let $PLUGIN_CACHE_HOME = expand('$NVIM_CACHE_HOME/to/plugin/home')
<


OPTION ~


- |laurel-`set!`|
- |laurel-`setglobal!`|
- |laurel-`setlocal!`|
- |laurel-`go!`|
- |laurel-`bo!`|
- |laurel-`wo!`|


                                                                 *laurel-set!*

set!                                   Set, append, prepend, or remove, value
                                       to the option. Almost equivalent to
                                       `:set` in Vim script.


>fennel
    (set! name ?flag ?val)
<



- `name`: (string) Option name. As long as the option name is bare-string,
    option name is case-insensitive; you can improve readability a bit with
    camelCase/PascalCase. Since `:h {option}` is also case-insensitive,
    `(setlocal! :keywordPrg ":help")` for fennel still makes sense.
- `?flag`: (symbol) Omittable flag. Set one of `+`, `^`, or `-` to append,
    prepend, or remove, value to the option.
- `?val`: (boolean|number|string|table) New option value. If not provided, the
    value is supposed to be `true` (experimental).


>fennel
    (set! :number true)
    (set! :formatOptions [:1 :2 :c :B])
    (set! :completeOpt [:menu :menuone :noselect])
    (set! :listChars {:space :_ :tab: ">~"})
    
    (set! :colorColumn + :+1)
    (set! :rtp ^ [:/path/to/another/dir])
    
    (local val :yes)
    (set! :signColumn val)
    (local opt :wrap)
    (set! opt false)
<


is equivalent to

>vim
    set number
    set signcolumn=yes
    set formatoptions=12cB
    set completeopt=menu,menuone,noselect
    set listchars=space:_,tab:>~
    
    set colorcolumn+=+1
    set rtp^=/path/to/another/dir
    
    let val = 'yes'
    let &signcolumn = val
    let opt = 'wrap'
    execute 'set no'. opt
<


>lua
    vim.api.nvim_set_option_value("number", true)
    vim.api.nvim_set_option_value("signcolumn", "yes")
    vim.api.nvim_set_option_value("formatoptions", "12cB")
    vim.api.nvim_set_option_value("completeopt", "menu,menuone,noselect")
    vim.api.nvim_set_option_value("listchars", "space:_,tab:>~")
    -- Or either with `vim.go` or with `vim.opt_global`,
    vim.go.number = true
    vim.go.signcolumn = "yes"
    vim.go.formatoptions = "12cB"
    vim.go.completeopt = {"menu", "menuone", "noselect"}
    vim.go.listchars = {
      space = "_",
      tab = ">~",
    }
    
    vim.opt_global.colorcolumn:append("+1")
    vim.opt_global.rtp:prepend("/path/to/another/dir")
    
    local val = "yes"
    vim.opt.signcolumn = val
    local opt = "wrap"
    vim.opt[opt] = false
<


Note: There is no plan to support option prefix either `no` or `inv`; instead,
set `false` or `(not vim.go.foo)` respectively.

                                                           *laurel-setglobal!*

setglobal!                             Set, append, prepend, or remove, global
                                       value to the option. Almost equivalent
                                       to `:setglobal` in Vim script.


>fennel
    (setglobal! name ?flag ?val)
<


See |laurel-`set!`| for the details.

                                                            *laurel-setlocal!*

setlocal!                              Set, append, prepend, or remove, local
                                       value to the option. Almost equivalent
                                       to `:setlocal` in Vim script.


>fennel
    (setlocal! name ?flag ?val)
<


See |laurel-`set!`| for the details.

                                                                  *laurel-go!*

go!                                    Alias of |laurel-`setglobal!`|.


>fennel
    (go! name value)
<


                                                                  *laurel-bo!*

bo!                                    Set a buffer option value. `:h
                                       nvim_buf_set_option()`.


>fennel
    (bo! ?id name value)
<



- `?id`: (integer) Buffer handle, or 0 for current buffer.
- `name`: (string) Option name. Case-insensitive as long as in bare-string.
- `value`: (any) Option value.


>fennel
    (bo! :fileType :fennel)
    (bo! 10 :bufType :nofile)
<


is equivalent to

>lua
    vim.api.nvim_buf_set_option(0, "filetype", "fennel")
    vim.api.nvim_buf_set_option(10, "buftype", "nofile")
    -- Or with `vim.bo`
    vim.bo.filetype = "fennel"
    vim.bo[10].buftype = "nofile"
<


>vim
    call setbufvar(0, '&filetype', 'fennel')
    call setbufvar(10, '&buftype', 'nofile')
<


                                                                  *laurel-wo!*

wo!                                    Set a window option value. `:h
                                       nvim_win_set_option()`.


>fennel
    (wo! ?id name value)
<



- `?id`: (integer) Window handle, or 0 for current window.
- `name`: (string) Option name. Case-insensitive as long as in bare-string.
- `value`: (any) Option value.


>fennel
    (wo! :number false)
    (wo! 10 :signColumn :no)
<


is equivalent to

>lua
    vim.api.nvim_win_set_option(0, "number", false)
    vim.api.nvim_win_set_option(10, "signcolumn", "no")
    -- Or with `vim.wo`
    vim.wo.number = false
    vim.wo[10].signcolumn = "no"
<


>vim
    call setwinvar(0, '&number', v:false)
    call setwinvar(10, '&signcolumn', 'no')
<


OTHERS ~


- |laurel-command!|
- |laurel-feedkeys!|
- |laurel-highlight!|
- |laurel-hi!|


                                                             *laurel-command!*

command!                               Create a user command.


>fennel
    (command! ?extra-opts name command ?api-opts)
    (command! name ?extra-opts command ?api-opts)
<



- |laurel-`?extra-opts`|: (bare-sequence) Optional command attributes.
    Additional attributes:
    - `<buffer>`: Create command in current buffer by itself.
    - `buffer`: Create command in the buffer of the next value.
- `name`: (string) Name of the new user command. It must begin with an
    uppercase letter.
- `command`: (string|function) Replacement command.
- |laurel-`?api-opts`|: (kv-table) Optional command attributes. The same
    as `opts` for `nvim_create_user_command()`.


>fennel
    (command! :SayHello
              [:bang]
              "echo 'Hello world!'"
              {:desc "Say Hello!"})
    (command! :Salute
              [:bar :<buffer> :desc "Salute!"]
              (print "Hello world!"))
<


is equivalent to

>vim
    command! -bang SayHello echo 'Hello world!'
    command! -bar -buffer Salute echo 'Hello world!'
<


>lua
    vim.api.nvim_create_user_command("SayHello", "echo 'Hello world!'", {
                                           bang = true,
                                           desc = "Say Hello!",
                                           })
    vim.api.nvim_buf_create_user_command(0, "Salute", function()
                                   print("Hello world!")
                                 end, {
                                 bar = true,
                                 desc = "Salute!"
                                })
<


                                                            *laurel-feedkeys!*

feedkeys!                              `:h feedkeys()`


>fennel
    (feedkeys! string ?flags)
<


>fennel
    (feedkeys! :foo<CR> :ni)
    (feedkeys! :foo<lt>CR> :ni)
<


is equivalent to

>vim
    call feedkeys("foo\<CR>", 'ni')
    call feedkeys('foo<CR>', 'ni')
<


>lua
    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("foo<CR>", true, true, true) "ni", false)
    vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes("foo<lt>CR>", true, true, true) "ni", false)
<


                                                           *laurel-highlight!*

highlight!                             Set a highlight group.


>fennel
    (highlight! ?ns-id name val)
<



- `?ns-id`: (number) Namespace id for this highlight
    `nvim_create_namespace()`.
- `name`: (string) Highlight group name, e.g., "ErrorMsg".
- `val`: (kv-table) Highlight definition map. `:h nvim_set_hl()`. As long as
    the keys are bare-strings, `cterm` attribute map can contain `fg`/`bg`
    instead of `ctermfg`/`ctermbg` key.


>fennel
    (highlight! :Foo {:fg "8d9eb2" :bold true :italic true :ctermfg 103 :cterm {:bold true :italic true}})
    ;; or (as long as `val` keys are bare-strings)
    (highlight! :Foo {:fg "8d9eb2" :bold true :italic true :cterm {:fg 103 :bold true :italic true}})
<


is equivalent to

>vim
    highlight! Foo guifg=8d9eb2 gui=bold,italic ctermfg=103 cterm=bold,italic
<


>lua
    nvim_set_nl(0, "Foo", {
      fg = "8d9eb2",
      ctermfg = 103,
      bold = true,
      italic = true,
      cterm = {
        bold = true,
        italic = true,
      }
    })
<


                                                                  *laurel-hi!*

hi!                                    An alias of |laurel-`highlight!`|.


ANTI-PATTERNS                                           *laurel-anti-patterns*

|LAUREL-AUTOCMD!| ~

                                         *laurel-pcall-in-the-end-of-callback*

pcall in the end of callback           It could be an unexpected behavior that
                                       `autocmd` whose callback ends with
                                       `pcall` is executed only once because of
                                       the combination:



- Fennel `list` returns the last value.
- `pcall` returns `true` when the call succeeds without errors.
- `nvim_create_autocmd()` deletes itself when its callback function returns
    `true`.


ANTI-PATTERN

>fennel
    (autocmd! group events (pcall foobar))
    (autocmd! group events (fn []
                             ;; Do something else
                             (pcall foobar)))
<


PATTERN

>fennel
    (macro ->nil [...]
      "Make sure to return `nil`."
      `(do
         ,...
         nil))
    
    (autocmd! group events (->nil (pcall foobar)))
    (autocmd! group events (fn []
                             ;; Do something else
                             (pcall foobar)
                             ;; Return any other value than `true`.
                             nil))
<


                                *laurel-Nested-anonymous-function-in-callback*

Nested anonymous function in callback  `$` in the outermost hash function
                                       represents the single table argument
                                       from `nvim_create_autocmd()`; on the
                                       other hand, `$` in any hash functions
                                       included in another anonymous function
                                       is meaningless in many cases.


ANTI-PATTERN

>fennel
    (autocmd! group events (vim.schedule (nnoremap [:buffer $.buf] :lhs :rhs)))
    (autocmd! group events (fn []
                             (vim.schedule (nnoremap [:buffer $.buf] :lhs :rhs))))
<


PATTERN

>fennel
    (autocmd! group events (vim.schedule (fn []
                                            (nnoremap [:buffer $.buf] :lhs :rhs))))
<


DEPRECATED FEATURES                               *laurel-deprecated-features*

SEMANTIC VERSIONING ~

This project nvim-laurel follows Semantic Versioning 2.0.0
<https://semver.org/spec/v2.0.0.html>. It should issue at least one version
prior to a version where deprecated features are removed, i.e., before any
breaking changes.

DEPRECATED FEATURE HANDLING ~

If you were unfortunately in trouble due to some breaking changes, please read
|laurel-the-last-resort|. If you get deprecation notices,
|laurel-g:laurel_deprecated| and its guidance would help you.

Itâ€™s strongly recommended to manage your vimrc by version control system like
`git`; otherwise, breaking changes on nvim-laurel could lead you to a dead end
where you could not launch nvim with any part of your vimrc until you resolve
them.

                                                      *laurel-The-Last-Resort*

The Last Resort                        Before introducing how to avoid breaking
                                       changes, it is necessary to describe how
                                       to resolve the dead end, where you have
                                       few or none of Lua files because you
                                       have unexpectedly recompiled all the
                                       Fennel files that includes some features
                                       removed from nvim-laurel. Breaking
                                       Changes could prevent you from launching
                                       nvim itself. In this case, you have two
                                       choices:



- Downgrade nvim-laurel according to Semantic Versioning 2.0.0
    <https://semver.org/spec/v2.0.0.html>; then, update your vimrc with deprecation
    notices of nvim-laurel. You should know the path where you download
    nvim-laurel: if you have lazy.nvim manage the version of nvim-laurel, it should
    be downloaded to `stdpath('config') .. '/lazy/nvim-laurel'` by default;
    packer.nvim, to `stdpath('data') .. '/pack/packer/start/nvim-laurel'`.
    Downgrade it by `git checkout <tag>` in your local nvim-laurel repository.
- Update your vimrcs anyway apart from your vimrc with the |-u| flag, e.g., run
    `nvim -u NONE` in your terminal.


                                                  *laurel-g:laurel_deprecated*

g:laurel_deprecated                    This variable is designed to help you
                                       update your codes with |Quickfix|. It
                                       will collect lines where deprecated
                                       features are detected.


Note: Itâ€™s strongly recommended to compile your Fennel codes with
`--correlate` flag because the detection runs on compiled Lua codes at runtime.

STEPS TO UPDATE DEPRECATED FEATURES BEFORE BREAKING CHANGES


1. Make sure you can update your vimrcs on stable enviromnent: launch multiple
instances of Neovim which have already loaded your stable config, i.e.,
detached from the unstable vimrcs about to undergoing changes.
2. Update deprecated features

This is a list of useful commands:


- With |`:cdo`| or |`:cfdo`|,
    - |`:norm`| or |`:normal`|
    - |`:g`| or |`:global`|
    - |`:s`| or |`:substitute`|
- With recording keys,
    1. |`:cfirst`|
    2. |`q`| to record keys into register
    3. |`:cnext`|
    4. |`@`| or |`Q`| to repeat keys in register


Here is a basic example to rename deprecated macro `old-macro` to new
compatible macro `new-macro`. Please adjust commands yourself as necessary. You
donâ€™t have to do it in the smartest way, of cource. Slow and steady wins the
race.

>vim
    :cexpr g:laurel_deprecated " Reset Quickfix list.
    :packadd cfilter " Enable builtin cfilter. `:h :Cfilter` for the details.
    :Cfilter /old-macro/ " Pick up related detections.
    :cfdo! %s/(old-macro /(new-macro /gec " Roughly update macro names.
    :cfdo update
<

3. Nowadays, your vimrcs are supposed to be under git controlâ€¦

>vim
    :cd ~/.config/nvim " Make sure current directory is in your config repository.
    :!git reset --mixed HEAD
    :cfdo !git add %
    :!git commit -m 'refactor(laurel): update macros'
<



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
